// Generated from SearchQuery.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,17,296,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,146,
8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,
25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,4,29,188,8,29,
11,29,12,29,189,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
31,1,31,1,31,1,31,1,31,3,31,208,8,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,
35,1,35,1,36,1,36,1,36,3,36,236,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,
39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,3,40,268,8,40,1,41,1,41,1,41,
1,41,1,42,1,42,1,43,4,43,277,8,43,11,43,12,43,278,1,44,1,44,1,44,1,44,5,
44,285,8,44,10,44,12,44,288,9,44,1,44,1,44,1,45,4,45,293,8,45,11,45,12,45,
294,0,0,46,1,0,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,0,23,0,25,0,27,
0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,0,51,0,53,0,55,0,
57,0,59,1,61,2,63,3,65,4,67,5,69,6,71,7,73,8,75,9,77,10,79,11,81,12,83,13,
85,14,87,15,89,16,91,17,1,0,25,2,0,83,83,115,115,2,0,72,72,104,104,2,0,79,
79,111,111,2,0,87,87,119,119,2,0,85,85,117,117,2,0,82,82,114,114,2,0,67,
67,99,99,2,0,69,69,101,101,2,0,73,73,105,105,2,0,80,80,112,112,2,0,71,71,
103,103,2,0,77,77,109,109,2,0,84,84,116,116,2,0,76,76,108,108,2,0,70,70,
102,102,2,0,65,65,97,97,2,0,68,68,100,100,2,0,89,89,121,121,2,0,86,86,118,
118,1,0,48,57,1,0,65,90,1,0,97,122,2,0,9,9,32,32,2,0,34,34,92,92,4,0,32,
32,34,34,58,58,92,92,278,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
0,89,1,0,0,0,0,91,1,0,0,0,1,93,1,0,0,0,3,95,1,0,0,0,5,97,1,0,0,0,7,99,1,
0,0,0,9,101,1,0,0,0,11,103,1,0,0,0,13,105,1,0,0,0,15,107,1,0,0,0,17,109,
1,0,0,0,19,111,1,0,0,0,21,113,1,0,0,0,23,115,1,0,0,0,25,117,1,0,0,0,27,119,
1,0,0,0,29,121,1,0,0,0,31,123,1,0,0,0,33,125,1,0,0,0,35,127,1,0,0,0,37,129,
1,0,0,0,39,131,1,0,0,0,41,133,1,0,0,0,43,135,1,0,0,0,45,145,1,0,0,0,47,147,
1,0,0,0,49,154,1,0,0,0,51,158,1,0,0,0,53,163,1,0,0,0,55,172,1,0,0,0,57,178,
1,0,0,0,59,187,1,0,0,0,61,191,1,0,0,0,63,207,1,0,0,0,65,209,1,0,0,0,67,213,
1,0,0,0,69,221,1,0,0,0,71,226,1,0,0,0,73,235,1,0,0,0,75,237,1,0,0,0,77,244,
1,0,0,0,79,253,1,0,0,0,81,267,1,0,0,0,83,269,1,0,0,0,85,273,1,0,0,0,87,276,
1,0,0,0,89,280,1,0,0,0,91,292,1,0,0,0,93,94,7,0,0,0,94,2,1,0,0,0,95,96,7,
1,0,0,96,4,1,0,0,0,97,98,7,2,0,0,98,6,1,0,0,0,99,100,7,3,0,0,100,8,1,0,0,
0,101,102,7,4,0,0,102,10,1,0,0,0,103,104,7,5,0,0,104,12,1,0,0,0,105,106,
7,6,0,0,106,14,1,0,0,0,107,108,7,7,0,0,108,16,1,0,0,0,109,110,7,8,0,0,110,
18,1,0,0,0,111,112,7,9,0,0,112,20,1,0,0,0,113,114,7,10,0,0,114,22,1,0,0,
0,115,116,7,11,0,0,116,24,1,0,0,0,117,118,7,12,0,0,118,26,1,0,0,0,119,120,
7,13,0,0,120,28,1,0,0,0,121,122,7,14,0,0,122,30,1,0,0,0,123,124,7,15,0,0,
124,32,1,0,0,0,125,126,7,16,0,0,126,34,1,0,0,0,127,128,7,17,0,0,128,36,1,
0,0,0,129,130,7,18,0,0,130,38,1,0,0,0,131,132,7,19,0,0,132,40,1,0,0,0,133,
134,7,20,0,0,134,42,1,0,0,0,135,136,7,21,0,0,136,44,1,0,0,0,137,138,3,39,
19,0,138,139,3,39,19,0,139,140,3,39,19,0,140,146,1,0,0,0,141,142,3,39,19,
0,142,143,3,39,19,0,143,146,1,0,0,0,144,146,3,39,19,0,145,137,1,0,0,0,145,
141,1,0,0,0,145,144,1,0,0,0,146,46,1,0,0,0,147,148,3,23,11,0,148,149,3,15,
7,0,149,150,3,25,12,0,150,151,3,11,5,0,151,152,3,17,8,0,152,153,3,13,6,0,
153,48,1,0,0,0,154,155,3,27,13,0,155,156,3,5,2,0,156,157,3,21,10,0,157,50,
1,0,0,0,158,159,3,29,14,0,159,160,3,27,13,0,160,161,3,5,2,0,161,162,3,7,
3,0,162,52,1,0,0,0,163,164,3,27,13,0,164,165,3,31,15,0,165,166,3,1,0,0,166,
167,3,25,12,0,167,168,3,3,1,0,168,169,3,5,2,0,169,170,3,9,4,0,170,171,3,
11,5,0,171,54,1,0,0,0,172,173,3,25,12,0,173,174,3,5,2,0,174,175,3,33,16,
0,175,176,3,31,15,0,176,177,3,35,17,0,177,56,1,0,0,0,178,179,3,45,22,0,179,
180,5,46,0,0,180,181,3,45,22,0,181,182,5,46,0,0,182,183,3,45,22,0,183,184,
5,46,0,0,184,185,3,45,22,0,185,58,1,0,0,0,186,188,7,22,0,0,187,186,1,0,0,
0,188,189,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,60,1,0,0,0,191,192,
5,58,0,0,192,62,1,0,0,0,193,194,3,1,0,0,194,195,3,3,1,0,195,196,3,5,2,0,
196,197,3,7,3,0,197,208,1,0,0,0,198,199,3,37,18,0,199,200,3,17,8,0,200,201,
3,15,7,0,201,202,3,7,3,0,202,208,1,0,0,0,203,204,3,21,10,0,204,205,3,15,
7,0,205,206,3,25,12,0,206,208,1,0,0,0,207,193,1,0,0,0,207,198,1,0,0,0,207,
203,1,0,0,0,208,64,1,0,0,0,209,210,3,25,12,0,210,211,3,5,2,0,211,212,3,19,
9,0,212,66,1,0,0,0,213,214,3,3,1,0,214,215,3,17,8,0,215,216,3,21,10,0,216,
217,3,3,1,0,217,218,3,15,7,0,218,219,3,1,0,0,219,220,3,25,12,0,220,68,1,
0,0,0,221,222,3,27,13,0,222,223,3,31,15,0,223,224,3,1,0,0,224,225,3,25,12,
0,225,70,1,0,0,0,226,227,3,27,13,0,227,228,3,15,7,0,228,229,3,31,15,0,229,
230,3,1,0,0,230,231,3,25,12,0,231,72,1,0,0,0,232,236,3,47,23,0,233,236,3,
49,24,0,234,236,3,51,25,0,235,232,1,0,0,0,235,233,1,0,0,0,235,234,1,0,0,
0,236,74,1,0,0,0,237,238,3,1,0,0,238,239,3,5,2,0,239,240,3,9,4,0,240,241,
3,11,5,0,241,242,3,13,6,0,242,243,3,15,7,0,243,76,1,0,0,0,244,245,3,1,0,
0,245,246,3,5,2,0,246,247,3,9,4,0,247,248,3,11,5,0,248,249,3,13,6,0,249,
250,3,15,7,0,250,251,3,17,8,0,251,252,3,19,9,0,252,78,1,0,0,0,253,254,3,
1,0,0,254,255,3,5,2,0,255,256,3,9,4,0,256,257,3,11,5,0,257,258,3,13,6,0,
258,259,3,15,7,0,259,260,3,21,10,0,260,261,3,11,5,0,261,262,3,5,2,0,262,
263,3,9,4,0,263,264,3,19,9,0,264,80,1,0,0,0,265,268,3,53,26,0,266,268,3,
55,27,0,267,265,1,0,0,0,267,266,1,0,0,0,268,82,1,0,0,0,269,270,5,34,0,0,
270,271,3,57,28,0,271,272,5,34,0,0,272,84,1,0,0,0,273,274,3,57,28,0,274,
86,1,0,0,0,275,277,3,39,19,0,276,275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,
0,0,278,279,1,0,0,0,279,88,1,0,0,0,280,286,5,34,0,0,281,285,8,23,0,0,282,
283,5,92,0,0,283,285,9,0,0,0,284,281,1,0,0,0,284,282,1,0,0,0,285,288,1,0,
0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,286,1,0,0,0,289,
290,5,34,0,0,290,90,1,0,0,0,291,293,8,24,0,0,292,291,1,0,0,0,293,294,1,0,
0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,92,1,0,0,0,10,0,145,189,207,235,
267,278,284,286,294,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class SearchQueryLexer extends antlr4.Lexer {

    static grammarFileName = "SearchQuery.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, "':'" ];
	static symbolicNames = [ null, "WHITESPACE", "SEPERATOR", "COMMAND", "TOP", 
                          "HIGHEST", "LAST", "LEAST", "COUNTERTYPE", "SOURCETYPESOURCE", 
                          "SOURCETYPEIP", "SOURCETYPEGROUP", "TIMELINE", 
                          "QUOTEDIP", "ONLYIP", "DIGITS", "QUOTEDVALUE", 
                          "VALUE" ];
	static ruleNames = [ "S", "H", "O", "W", "U", "R", "C", "E", "I", "P", 
                      "G", "M", "T", "L", "F", "A", "D", "Y", "V", "DIGIT", 
                      "UPPERCASE", "LOWERCASE", "OCTATE", "METRIC", "LOG", 
                      "FLOW", "LASTHOUR", "TODAY", "IP", "WHITESPACE", "SEPERATOR", 
                      "COMMAND", "TOP", "HIGHEST", "LAST", "LEAST", "COUNTERTYPE", 
                      "SOURCETYPESOURCE", "SOURCETYPEIP", "SOURCETYPEGROUP", 
                      "TIMELINE", "QUOTEDIP", "ONLYIP", "DIGITS", "QUOTEDVALUE", 
                      "VALUE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

SearchQueryLexer.EOF = antlr4.Token.EOF;
SearchQueryLexer.WHITESPACE = 1;
SearchQueryLexer.SEPERATOR = 2;
SearchQueryLexer.COMMAND = 3;
SearchQueryLexer.TOP = 4;
SearchQueryLexer.HIGHEST = 5;
SearchQueryLexer.LAST = 6;
SearchQueryLexer.LEAST = 7;
SearchQueryLexer.COUNTERTYPE = 8;
SearchQueryLexer.SOURCETYPESOURCE = 9;
SearchQueryLexer.SOURCETYPEIP = 10;
SearchQueryLexer.SOURCETYPEGROUP = 11;
SearchQueryLexer.TIMELINE = 12;
SearchQueryLexer.QUOTEDIP = 13;
SearchQueryLexer.ONLYIP = 14;
SearchQueryLexer.DIGITS = 15;
SearchQueryLexer.QUOTEDVALUE = 16;
SearchQueryLexer.VALUE = 17;



