// Generated from SearchQuery.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,15,138,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,
1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,
5,60,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,4,7,71,8,7,11,7,12,7,72,1,8,
1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,
14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,17,4,17,128,8,17,11,17,12,17,129,1,18,4,
18,133,8,18,11,18,12,18,134,1,18,1,18,0,0,19,1,1,3,2,5,3,7,4,9,0,11,0,13,
0,15,0,17,5,19,6,21,7,23,8,25,9,27,10,29,11,31,12,33,13,35,14,37,15,1,0,
3,1,0,48,57,5,0,46,46,48,57,65,90,97,122,126,126,2,0,9,10,32,32,138,0,1,
1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,1,0,0,0,3,41,1,0,0,0,5,44,
1,0,0,0,7,47,1,0,0,0,9,49,1,0,0,0,11,59,1,0,0,0,13,61,1,0,0,0,15,70,1,0,
0,0,17,74,1,0,0,0,19,76,1,0,0,0,21,81,1,0,0,0,23,89,1,0,0,0,25,93,1,0,0,
0,27,97,1,0,0,0,29,104,1,0,0,0,31,110,1,0,0,0,33,117,1,0,0,0,35,127,1,0,
0,0,37,132,1,0,0,0,39,40,5,32,0,0,40,2,1,0,0,0,41,42,5,58,0,0,42,43,5,34,
0,0,43,4,1,0,0,0,44,45,5,34,0,0,45,46,5,32,0,0,46,6,1,0,0,0,47,48,5,34,0,
0,48,8,1,0,0,0,49,50,7,0,0,0,50,10,1,0,0,0,51,52,3,9,4,0,52,53,3,9,4,0,53,
54,3,9,4,0,54,60,1,0,0,0,55,56,3,9,4,0,56,57,3,9,4,0,57,60,1,0,0,0,58,60,
3,9,4,0,59,51,1,0,0,0,59,55,1,0,0,0,59,58,1,0,0,0,60,12,1,0,0,0,61,62,3,
11,5,0,62,63,5,46,0,0,63,64,3,11,5,0,64,65,5,46,0,0,65,66,3,11,5,0,66,67,
5,46,0,0,67,68,3,11,5,0,68,14,1,0,0,0,69,71,7,1,0,0,70,69,1,0,0,0,71,72,
1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,16,1,0,0,0,74,75,3,13,6,0,75,18,1,
0,0,0,76,77,5,115,0,0,77,78,5,104,0,0,78,79,5,111,0,0,79,80,5,119,0,0,80,
20,1,0,0,0,81,82,5,100,0,0,82,83,5,105,0,0,83,84,5,115,0,0,84,85,5,112,0,
0,85,86,5,108,0,0,86,87,5,97,0,0,87,88,5,121,0,0,88,22,1,0,0,0,89,90,5,103,
0,0,90,91,5,101,0,0,91,92,5,116,0,0,92,24,1,0,0,0,93,94,5,108,0,0,94,95,
5,111,0,0,95,96,5,103,0,0,96,26,1,0,0,0,97,98,5,109,0,0,98,99,5,101,0,0,
99,100,5,116,0,0,100,101,5,114,0,0,101,102,5,105,0,0,102,103,5,99,0,0,103,
28,1,0,0,0,104,105,5,103,0,0,105,106,5,114,0,0,106,107,5,111,0,0,107,108,
5,117,0,0,108,109,5,112,0,0,109,30,1,0,0,0,110,111,5,115,0,0,111,112,5,111,
0,0,112,113,5,117,0,0,113,114,5,114,0,0,114,115,5,99,0,0,115,116,5,101,0,
0,116,32,1,0,0,0,117,118,5,115,0,0,118,119,5,111,0,0,119,120,5,117,0,0,120,
121,5,114,0,0,121,122,5,99,0,0,122,123,5,101,0,0,123,124,5,105,0,0,124,125,
5,112,0,0,125,34,1,0,0,0,126,128,7,1,0,0,127,126,1,0,0,0,128,129,1,0,0,0,
129,127,1,0,0,0,129,130,1,0,0,0,130,36,1,0,0,0,131,133,7,2,0,0,132,131,1,
0,0,0,133,134,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,136,1,0,0,0,136,
137,6,18,0,0,137,38,1,0,0,0,5,0,59,72,129,134,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class SearchQueryLexer extends antlr4.Lexer {

    static grammarFileName = "SearchQuery.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "' '", "':\"'", "'\" '", "'\"'", null, "'show'", 
                         "'display'", "'get'", "'log'", "'metric'", "'group'", 
                         "'source'", "'sourceip'" ];
	static symbolicNames = [ null, null, null, null, null, "ONLYIP", "SHOW", 
                          "DISPLAY", "GET", "LOG", "METRIC", "GROUP", "SOURCE", 
                          "SOURCEIP", "TASK", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "DIGIT", "OCTATE", 
                      "IP", "TEXT", "ONLYIP", "SHOW", "DISPLAY", "GET", 
                      "LOG", "METRIC", "GROUP", "SOURCE", "SOURCEIP", "TASK", 
                      "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

SearchQueryLexer.EOF = antlr4.Token.EOF;
SearchQueryLexer.T__0 = 1;
SearchQueryLexer.T__1 = 2;
SearchQueryLexer.T__2 = 3;
SearchQueryLexer.T__3 = 4;
SearchQueryLexer.ONLYIP = 5;
SearchQueryLexer.SHOW = 6;
SearchQueryLexer.DISPLAY = 7;
SearchQueryLexer.GET = 8;
SearchQueryLexer.LOG = 9;
SearchQueryLexer.METRIC = 10;
SearchQueryLexer.GROUP = 11;
SearchQueryLexer.SOURCE = 12;
SearchQueryLexer.SOURCEIP = 13;
SearchQueryLexer.TASK = 14;
SearchQueryLexer.WS = 15;



